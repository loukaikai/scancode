/*    */ package BOOT-INF.classes.com.amarsoft.rwa.engine.entity;
/*    */ @TableName("RWA_EL_JOB")
/*    */ public class JobLogDo implements Serializable { private static final long serialVersionUID = 8234237673290002L; @TableId("JOB_ID")
/*    */   private String jobId; @TableField("JOB_TYPE")
/*    */   private String jobType; @TableField("CALCULATE_PARAM")
/*    */   private String calculateParam; @TableField("LOG_NO")
/*    */   private Long logNo; @TableField("TASK_TYPE")
/*    */   private String taskType; @TableField("RESULT_NO")
/*    */   private String resultNo; @TableField("DATA_DATE")
/*    */   private Date dataDate; @TableField("DATA_BATCH_NO")
/*    */   private String dataBatchNo;
/*    */   @TableField("SERVER_NAME")
/*    */   private String serverName;
/*    */   
/* 15 */   public void setJobId(String jobId) { this.jobId = jobId; } @TableField("SERVER_IP") private String serverIp; @TableField("CALCULATE_NUM") private Integer calculateNum; @TableField("NORMAL_CALC_CNT") private Integer normalCalcCnt; @TableField("NORMAL_SKIP_CNT") private Integer normalSkipCnt; @TableField("EXCEPTION_SKIP_CNT") private Integer exceptionSkipCnt; @TableField("START_TIME") private Timestamp startTime; @TableField("END_TIME") private Timestamp endTime; @TableField("CALC_TIME") private BigDecimal calcTime; @TableField("CALCULATE_STATUS") private String calculateStatus; @TableField("EXCEPTION_INFO") private String exceptionInfo; @TableField("RECORD_FLAG") private String recordFlag; public void setJobType(String jobType) { this.jobType = jobType; } public void setCalculateParam(String calculateParam) { this.calculateParam = calculateParam; } public void setLogNo(Long logNo) { this.logNo = logNo; } public void setTaskType(String taskType) { this.taskType = taskType; } public void setResultNo(String resultNo) { this.resultNo = resultNo; } public void setDataDate(Date dataDate) { this.dataDate = dataDate; } public void setDataBatchNo(String dataBatchNo) { this.dataBatchNo = dataBatchNo; } public void setServerName(String serverName) { this.serverName = serverName; } public void setServerIp(String serverIp) { this.serverIp = serverIp; } public void setCalculateNum(Integer calculateNum) { this.calculateNum = calculateNum; } public void setNormalCalcCnt(Integer normalCalcCnt) { this.normalCalcCnt = normalCalcCnt; } public void setNormalSkipCnt(Integer normalSkipCnt) { this.normalSkipCnt = normalSkipCnt; } public void setExceptionSkipCnt(Integer exceptionSkipCnt) { this.exceptionSkipCnt = exceptionSkipCnt; } public void setStartTime(Timestamp startTime) { this.startTime = startTime; } public void setEndTime(Timestamp endTime) { this.endTime = endTime; } public void setCalcTime(BigDecimal calcTime) { this.calcTime = calcTime; } public void setCalculateStatus(String calculateStatus) { this.calculateStatus = calculateStatus; } public void setExceptionInfo(String exceptionInfo) { this.exceptionInfo = exceptionInfo; } public void setRecordFlag(String recordFlag) { this.recordFlag = recordFlag; } public void setCtCount(AtomicInteger ctCount) { this.ctCount = ctCount; } public void setCtCalculateCount(AtomicInteger ctCalculateCount) { this.ctCalculateCount = ctCalculateCount; } public void setCtSkipCount(AtomicInteger ctSkipCount) { this.ctSkipCount = ctSkipCount; } public void setCtExceptionCount(AtomicInteger ctExceptionCount) { this.ctExceptionCount = ctExceptionCount; } public void setReaderTime(AtomicLong readerTime) { this.readerTime = readerTime; } public void setProcessorTime(AtomicLong processorTime) { this.processorTime = processorTime; } public void setWriterTime(AtomicLong writerTime) { this.writerTime = writerTime; } public boolean equals(Object o) { if (o == this) return true;  if (!(o instanceof com.amarsoft.rwa.engine.entity.JobLogDo)) return false;  com.amarsoft.rwa.engine.entity.JobLogDo other = (com.amarsoft.rwa.engine.entity.JobLogDo)o; if (!other.canEqual(this)) return false;  Object this$logNo = getLogNo(), other$logNo = other.getLogNo(); if ((this$logNo == null) ? (other$logNo != null) : !this$logNo.equals(other$logNo)) return false;  Object this$calculateNum = getCalculateNum(), other$calculateNum = other.getCalculateNum(); if ((this$calculateNum == null) ? (other$calculateNum != null) : !this$calculateNum.equals(other$calculateNum)) return false;  Object this$normalCalcCnt = getNormalCalcCnt(), other$normalCalcCnt = other.getNormalCalcCnt(); if ((this$normalCalcCnt == null) ? (other$normalCalcCnt != null) : !this$normalCalcCnt.equals(other$normalCalcCnt)) return false;  Object this$normalSkipCnt = getNormalSkipCnt(), other$normalSkipCnt = other.getNormalSkipCnt(); if ((this$normalSkipCnt == null) ? (other$normalSkipCnt != null) : !this$normalSkipCnt.equals(other$normalSkipCnt)) return false;  Object this$exceptionSkipCnt = getExceptionSkipCnt(), other$exceptionSkipCnt = other.getExceptionSkipCnt(); if ((this$exceptionSkipCnt == null) ? (other$exceptionSkipCnt != null) : !this$exceptionSkipCnt.equals(other$exceptionSkipCnt)) return false;  Object this$jobId = getJobId(), other$jobId = other.getJobId(); if ((this$jobId == null) ? (other$jobId != null) : !this$jobId.equals(other$jobId)) return false;  Object this$jobType = getJobType(), other$jobType = other.getJobType(); if ((this$jobType == null) ? (other$jobType != null) : !this$jobType.equals(other$jobType)) return false;  Object this$calculateParam = getCalculateParam(), other$calculateParam = other.getCalculateParam(); if ((this$calculateParam == null) ? (other$calculateParam != null) : !this$calculateParam.equals(other$calculateParam)) return false;  Object this$taskType = getTaskType(), other$taskType = other.getTaskType(); if ((this$taskType == null) ? (other$taskType != null) : !this$taskType.equals(other$taskType)) return false;  Object this$resultNo = getResultNo(), other$resultNo = other.getResultNo(); if ((this$resultNo == null) ? (other$resultNo != null) : !this$resultNo.equals(other$resultNo)) return false;  Object this$dataDate = getDataDate(), other$dataDate = other.getDataDate(); if ((this$dataDate == null) ? (other$dataDate != null) : !this$dataDate.equals(other$dataDate)) return false;  Object this$dataBatchNo = getDataBatchNo(), other$dataBatchNo = other.getDataBatchNo(); if ((this$dataBatchNo == null) ? (other$dataBatchNo != null) : !this$dataBatchNo.equals(other$dataBatchNo)) return false;  Object this$serverName = getServerName(), other$serverName = other.getServerName(); if ((this$serverName == null) ? (other$serverName != null) : !this$serverName.equals(other$serverName)) return false;  Object this$serverIp = getServerIp(), other$serverIp = other.getServerIp(); if ((this$serverIp == null) ? (other$serverIp != null) : !this$serverIp.equals(other$serverIp)) return false;  Object this$startTime = getStartTime(), other$startTime = other.getStartTime(); if ((this$startTime == null) ? (other$startTime != null) : !this$startTime.equals(other$startTime)) return false;  Object this$endTime = getEndTime(), other$endTime = other.getEndTime(); if ((this$endTime == null) ? (other$endTime != null) : !this$endTime.equals(other$endTime)) return false;  Object this$calcTime = getCalcTime(), other$calcTime = other.getCalcTime(); if ((this$calcTime == null) ? (other$calcTime != null) : !this$calcTime.equals(other$calcTime)) return false;  Object this$calculateStatus = getCalculateStatus(), other$calculateStatus = other.getCalculateStatus(); if ((this$calculateStatus == null) ? (other$calculateStatus != null) : !this$calculateStatus.equals(other$calculateStatus)) return false;  Object this$exceptionInfo = getExceptionInfo(), other$exceptionInfo = other.getExceptionInfo(); if ((this$exceptionInfo == null) ? (other$exceptionInfo != null) : !this$exceptionInfo.equals(other$exceptionInfo)) return false;  Object this$recordFlag = getRecordFlag(), other$recordFlag = other.getRecordFlag(); if ((this$recordFlag == null) ? (other$recordFlag != null) : !this$recordFlag.equals(other$recordFlag)) return false;  Object this$ctCount = getCtCount(), other$ctCount = other.getCtCount(); if ((this$ctCount == null) ? (other$ctCount != null) : !this$ctCount.equals(other$ctCount)) return false;  Object this$ctCalculateCount = getCtCalculateCount(), other$ctCalculateCount = other.getCtCalculateCount(); if ((this$ctCalculateCount == null) ? (other$ctCalculateCount != null) : !this$ctCalculateCount.equals(other$ctCalculateCount)) return false;  Object this$ctSkipCount = getCtSkipCount(), other$ctSkipCount = other.getCtSkipCount(); if ((this$ctSkipCount == null) ? (other$ctSkipCount != null) : !this$ctSkipCount.equals(other$ctSkipCount)) return false;  Object this$ctExceptionCount = getCtExceptionCount(), other$ctExceptionCount = other.getCtExceptionCount(); if ((this$ctExceptionCount == null) ? (other$ctExceptionCount != null) : !this$ctExceptionCount.equals(other$ctExceptionCount)) return false;  Object this$readerTime = getReaderTime(), other$readerTime = other.getReaderTime(); if ((this$readerTime == null) ? (other$readerTime != null) : !this$readerTime.equals(other$readerTime)) return false;  Object this$processorTime = getProcessorTime(), other$processorTime = other.getProcessorTime(); if ((this$processorTime == null) ? (other$processorTime != null) : !this$processorTime.equals(other$processorTime)) return false;  Object this$writerTime = getWriterTime(), other$writerTime = other.getWriterTime(); return !((this$writerTime == null) ? (other$writerTime != null) : !this$writerTime.equals(other$writerTime)); } protected boolean canEqual(Object other) { return other instanceof com.amarsoft.rwa.engine.entity.JobLogDo; } public int hashCode() { int PRIME = 59; result = 1; Object $logNo = getLogNo(); result = result * 59 + (($logNo == null) ? 43 : $logNo.hashCode()); Object $calculateNum = getCalculateNum(); result = result * 59 + (($calculateNum == null) ? 43 : $calculateNum.hashCode()); Object $normalCalcCnt = getNormalCalcCnt(); result = result * 59 + (($normalCalcCnt == null) ? 43 : $normalCalcCnt.hashCode()); Object $normalSkipCnt = getNormalSkipCnt(); result = result * 59 + (($normalSkipCnt == null) ? 43 : $normalSkipCnt.hashCode()); Object $exceptionSkipCnt = getExceptionSkipCnt(); result = result * 59 + (($exceptionSkipCnt == null) ? 43 : $exceptionSkipCnt.hashCode()); Object $jobId = getJobId(); result = result * 59 + (($jobId == null) ? 43 : $jobId.hashCode()); Object $jobType = getJobType(); result = result * 59 + (($jobType == null) ? 43 : $jobType.hashCode()); Object $calculateParam = getCalculateParam(); result = result * 59 + (($calculateParam == null) ? 43 : $calculateParam.hashCode()); Object $taskType = getTaskType(); result = result * 59 + (($taskType == null) ? 43 : $taskType.hashCode()); Object $resultNo = getResultNo(); result = result * 59 + (($resultNo == null) ? 43 : $resultNo.hashCode()); Object $dataDate = getDataDate(); result = result * 59 + (($dataDate == null) ? 43 : $dataDate.hashCode()); Object $dataBatchNo = getDataBatchNo(); result = result * 59 + (($dataBatchNo == null) ? 43 : $dataBatchNo.hashCode()); Object $serverName = getServerName(); result = result * 59 + (($serverName == null) ? 43 : $serverName.hashCode()); Object $serverIp = getServerIp(); result = result * 59 + (($serverIp == null) ? 43 : $serverIp.hashCode()); Object $startTime = getStartTime(); result = result * 59 + (($startTime == null) ? 43 : $startTime.hashCode()); Object $endTime = getEndTime(); result = result * 59 + (($endTime == null) ? 43 : $endTime.hashCode()); Object $calcTime = getCalcTime(); result = result * 59 + (($calcTime == null) ? 43 : $calcTime.hashCode()); Object $calculateStatus = getCalculateStatus(); result = result * 59 + (($calculateStatus == null) ? 43 : $calculateStatus.hashCode()); Object $exceptionInfo = getExceptionInfo(); result = result * 59 + (($exceptionInfo == null) ? 43 : $exceptionInfo.hashCode()); Object $recordFlag = getRecordFlag(); result = result * 59 + (($recordFlag == null) ? 43 : $recordFlag.hashCode()); Object $ctCount = getCtCount(); result = result * 59 + (($ctCount == null) ? 43 : $ctCount.hashCode()); Object $ctCalculateCount = getCtCalculateCount(); result = result * 59 + (($ctCalculateCount == null) ? 43 : $ctCalculateCount.hashCode()); Object $ctSkipCount = getCtSkipCount(); result = result * 59 + (($ctSkipCount == null) ? 43 : $ctSkipCount.hashCode()); Object $ctExceptionCount = getCtExceptionCount(); result = result * 59 + (($ctExceptionCount == null) ? 43 : $ctExceptionCount.hashCode()); Object $readerTime = getReaderTime(); result = result * 59 + (($readerTime == null) ? 43 : $readerTime.hashCode()); Object $processorTime = getProcessorTime(); result = result * 59 + (($processorTime == null) ? 43 : $processorTime.hashCode()); Object $writerTime = getWriterTime(); return result * 59 + (($writerTime == null) ? 43 : $writerTime.hashCode()); } public String toString() { return "JobLogDo(jobId=" + getJobId() + ", jobType=" + getJobType() + ", calculateParam=" + getCalculateParam() + ", logNo=" + getLogNo() + ", taskType=" + getTaskType() + ", resultNo=" + getResultNo() + ", dataDate=" + getDataDate() + ", dataBatchNo=" + getDataBatchNo() + ", serverName=" + getServerName() + ", serverIp=" + getServerIp() + ", calculateNum=" + getCalculateNum() + ", normalCalcCnt=" + getNormalCalcCnt() + ", normalSkipCnt=" + getNormalSkipCnt() + ", exceptionSkipCnt=" + getExceptionSkipCnt() + ", startTime=" + getStartTime() + ", endTime=" + getEndTime() + ", calcTime=" + getCalcTime() + ", calculateStatus=" + getCalculateStatus() + ", exceptionInfo=" + getExceptionInfo() + ", recordFlag=" + getRecordFlag() + ", ctCount=" + getCtCount() + ", ctCalculateCount=" + getCtCalculateCount() + ", ctSkipCount=" + getCtSkipCount() + ", ctExceptionCount=" + getCtExceptionCount() + ", readerTime=" + getReaderTime() + ", processorTime=" + getProcessorTime() + ", writerTime=" + getWriterTime() + ")"; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public String getJobId() {
/* 22 */     return this.jobId;
/*    */   } public String getJobType() {
/* 24 */     return this.jobType;
/*    */   } public String getCalculateParam() {
/* 26 */     return this.calculateParam;
/*    */   } public Long getLogNo() {
/* 28 */     return this.logNo;
/*    */   } public String getTaskType() {
/* 30 */     return this.taskType;
/*    */   } public String getResultNo() {
/* 32 */     return this.resultNo;
/*    */   } public Date getDataDate() {
/* 34 */     return this.dataDate;
/*    */   } public String getDataBatchNo() {
/* 36 */     return this.dataBatchNo;
/*    */   } public String getServerName() {
/* 38 */     return this.serverName;
/*    */   } public String getServerIp() {
/* 40 */     return this.serverIp;
/*    */   } public Integer getCalculateNum() {
/* 42 */     return this.calculateNum;
/*    */   } public Integer getNormalCalcCnt() {
/* 44 */     return this.normalCalcCnt;
/*    */   } public Integer getNormalSkipCnt() {
/* 46 */     return this.normalSkipCnt;
/*    */   } public Integer getExceptionSkipCnt() {
/* 48 */     return this.exceptionSkipCnt;
/*    */   } public Timestamp getStartTime() {
/* 50 */     return this.startTime;
/*    */   } public Timestamp getEndTime() {
/* 52 */     return this.endTime;
/*    */   } public BigDecimal getCalcTime() {
/* 54 */     return this.calcTime;
/*    */   } public String getCalculateStatus() {
/* 56 */     return this.calculateStatus;
/*    */   } public String getExceptionInfo() {
/* 58 */     return this.exceptionInfo;
/*    */   }
/* 60 */   public String getRecordFlag() { return this.recordFlag; } @TableField(exist = false)
/* 61 */   private AtomicInteger ctCount = new AtomicInteger(0);
/* 62 */   public AtomicInteger getCtCount() { return this.ctCount; } @TableField(exist = false)
/* 63 */   private AtomicInteger ctCalculateCount = new AtomicInteger(0);
/* 64 */   public AtomicInteger getCtCalculateCount() { return this.ctCalculateCount; } @TableField(exist = false)
/* 65 */   private AtomicInteger ctSkipCount = new AtomicInteger(0);
/* 66 */   public AtomicInteger getCtSkipCount() { return this.ctSkipCount; } @TableField(exist = false)
/* 67 */   private AtomicInteger ctExceptionCount = new AtomicInteger(0);
/* 68 */   public AtomicInteger getCtExceptionCount() { return this.ctExceptionCount; } @TableField(exist = false)
/* 69 */   private AtomicLong readerTime = new AtomicLong(0L);
/* 70 */   public AtomicLong getReaderTime() { return this.readerTime; } @TableField(exist = false)
/* 71 */   private AtomicLong processorTime = new AtomicLong(0L);
/* 72 */   public AtomicLong getProcessorTime() { return this.processorTime; } @TableField(exist = false)
/* 73 */   private AtomicLong writerTime = new AtomicLong(0L); public AtomicLong getWriterTime() {
/* 74 */     return this.writerTime;
/*    */   } }


/* Location:              C:\Users\16509\Desktop\工作文档\稠州银行\代码文件\rwa-engine-1.0-SNAPSHOT\rwa-engine-1.0-SNAPSHOT.jar!\BOOT-INF\classes\com\amarsoft\rwa\engine\entity\JobLogDo.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */